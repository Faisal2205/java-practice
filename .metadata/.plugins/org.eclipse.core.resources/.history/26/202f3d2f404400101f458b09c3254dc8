package com.singleton;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

public class Main {
	

	public static void main(String[] args) throws NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
		
//		Thread t1 = new Thread(() ->{
//             Samosa samosa1 = Samosa.getSamosa();	
//			System.out.println(samosa1.hashCode());
//			
//		});
//		Thread t2 = new Thread(()->{
//         Samosa samosa2 = Samosa.getSamosa();
//			System.out.println(samosa2.hashCode());
//		});
//		t1.start();
//		t2.start();
	
		
		
		
		
		
		// This is not a good way to create Singleton object. because if client does not need of object fir bhi its crating the object. 
		
//		Jalebi j1 = Jalebi.getJalebi();
//		Jalebi j2 = Jalebi.getJalebi();
//		
//		System.out.println(j1.hashCode());
//		System.out.println(j2.hashCode());

		
		//         1.   Breaking singleton by Reflecting API
		
		Samosa s1 = Samosa.getSamosa();
		System.out.println(s1.hashCode());
		
		Constructor<Samosa> constructor = Samosa.class.getDeclaredConstructor();
		 Samosa s2 =constructor.newInstance();
		 System.out.println(s2.hashCode());
	}
}
